// Generated by CoffeeScript 1.10.0
(function() {
  var MatchMaker, Utils, matchmakerSocket, net;

  net = require('net');

  Utils = require("./utils");

  matchmakerSocket = net.createServer();

  MatchMaker = (function() {
    function MatchMaker(listener) {
      this.listener = listener;
      this.utils = new Utils;
      this.N = this.utils.getN();
      this.HOST = this.utils.getHOST();
      this.MATCHMAKER_PORT = this.utils.getMATCHMAKER_PORT();

      /*
      @server = matchmakerSocket
      @server.on 'connection', (@client) ->
          console.log("Connection Made with matchmaker")
          @client.on 'data', (data) ->
              console.log("received mm data")
              @receivedMessage(data)
      @server.listen @MATCHMAKER_PORT
      console.log("Matchmaker Port started")
       */
      this.startServer();
    }

    MatchMaker.prototype.connectionFunction = function(client) {
      this.client = client;
      console.log("Connection Made with matchmaker");
      return this.client.on('data', function(data) {
        console.log("received mm data");
        return this.receivedMessage(data);
      });
    };

    MatchMaker.prototype.checkIfNumbersValid = function(numbers) {
      var i, len, number;
      if (numbers.length !== this.N) {
        return false;
      }
      for (i = 0, len = numbers.length; i < len; i++) {
        number = numbers[i];
        if (number < 0) {
          return false;
        } else if (number > 1) {
          return false;
        } else if (this.utils.numberOfDecimals(number) > 4) {
          return false;
        }
      }
      return true;
    };

    MatchMaker.prototype.makeNumsValid = function(numbers) {
      var additionalNumsNeedded, amountToRemove, i, index, j, len, num, ref;
      if (numbers.length > this.N) {
        amountToRemove = numbers.length - this.N;
        numbers = numbers.slice(this.N, amountToRemove);
      } else if (numbers.length < this.N) {
        additionalNumsNeedded = this.N - numbers.length;
        for (i = 0, ref = additionalNumsNeeded; 0 <= ref ? i <= ref : i >= ref; 0 <= ref ? i++ : i--) {
          numbers.push(0);
        }
      }
      for (index = j = 0, len = numbers.length; j < len; index = ++j) {
        num = numbers[index];
        if (num < 0) {
          numbers[index] = 0;
        } else if (num > 1) {
          numbers[index] = 1;
        }
      }
      return numbers;
    };

    MatchMaker.prototype.receivedMessage = function(message) {
      var valid;
      console.log("Matchmaker Socket Recieved Message");
      this.currentNums = this.utils.convertStringToNumArray(message);
      valid = this.checkIfNumbersValid(this.currentNums);
      if (valid) {
        this.lastValidNums = this.currentNums;
      } else {
        if (typeof this.lastValidNums === 'undefined') {
          this.currentNums = this.utils.convertStringToNumArray(message, 4);
          this.lastValidNums = this.makeNumsValid(this.currentNums);
        }
      }
      return this.listner.receivedCandidateFromMM(this.lastValidNums);
    };

    MatchMaker.prototype.sendMessage = function(message) {
      console.log("Matchmaker socket sending message");
      return this.client.write(message);
    };

    MatchMaker.prototype.startServer = function() {
      this.server = matchmakerSocket;
      this.server.on('connection', function(client) {
        this.client = client;
        console.log("Connection Made with matchmaker");
        return this.client.on('data', function(data) {
          console.log("received mm data");
          return this.receivedMessage(data);
        });
      });
      this.server.listen(this.MATCHMAKER_PORT);
      return console.log("Matchmaker Port started");
    };

    return MatchMaker;

  })();

  module.exports = MatchMaker;

}).call(this);
