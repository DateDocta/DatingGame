// Generated by CoffeeScript 1.10.0
(function() {
  var Player, Utils, net, playerSocket, utilsL;

  net = require('net');

  Utils = require("./utils");

  utilsL = new Utils;

  playerSocket = net.createServer();

  Player = (function() {
    function Player() {
      this.utils = new Utils;
      this.N = this.utils.N;
      this.HOST = this.utils.HOST;
      this.PLAYER_PORT = this.utils.PLAYER_PORT;
    }

    Player.prototype.checkIfSumToCorrectValues = function(numbers) {
      var i, len, number, totalNegativeValue, totalPositiveValue, valid;
      totalPositiveValue = 0;
      totalNegativeValue = 0;
      for (i = 0, len = numbers.length; i < len; i++) {
        number = numbers[i];
        if (number > 0) {
          totalPositiveValue += number;
        } else {
          totalNegativeValue += number;
        }
      }
      if (totalPositiveValue > 0.999999999 && totalNegativeValue < -0.999999999) {
        valid = true;
      } else {
        console.log("Received an invalid Candidate from Player");
        console.log("Total positive value is " + totalPositiveValue);
        console.log("Total negative value is " + totalNegativeValue);
        valid = false;
      }
      return valid;
    };

    Player.prototype.addListener = function(listener) {
      this.listener = listener;
      return console.log("Listener added");
    };

    Player.prototype.checkIfInitialNumbersAreValid = function(initialNumbers) {
      var valid;
      return valid = this.briefCheckIfNumbersValid(initialNumbers);
    };

    Player.prototype.checkIfChangedFivePercentOfWeights = function(numbers) {
      var i, index, maxAllowedToChange, ref, totalChanged, valid;
      maxAllowedToChange = this.N / 20;
      totalChanged = 0;
      for (index = i = 0, ref = numbers.length - 1; 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
        if (numbers[index] === !this.lastValidNums[index]) {
          totalChanged += 1;
        }
      }
      return valid = totalChanged <= maxAllowedToChange;
    };

    Player.prototype.checkIfChangedValuesAreMaxTwentyPercentDifferent = function(numbers) {
      var currentTestingNum, currentValidNum, i, index, percentValue, ref;
      for (index = i = 0, ref = numbers.length - 1; 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
        currentTestingNum = numbers[index];
        currentValidNum = this.lastValidNums[index];
        if (currentTestingNum === !currentValidNum) {
          percentValue = currentTestingNum / currentValidNum;
          if (percentValue < 0.8 || percentValue > 1.2) {
            return false;
          }
        }
      }
      return true;
    };

    Player.prototype.checkIfLatterValuesAreValid = function(numbers) {
      if (!this.briefCheckIfNumbersValid(numbers)) {
        return false;
      } else if (!this.checkIfChangedFivePercentOfWeights(numbers)) {
        return false;
      } else if (!this.checkIfChangedValuesAreMaxTwentyPercentDifferent(numbers)) {
        return false;
      } else {
        return true;
      }
    };

    Player.prototype.briefCheckIfNumbersValid = function(numbers) {
      var i, len, number;
      if (numbers.length !== this.N) {
        console.log("Length Incorrect: length is " + numbers.length);
        return false;
      }
      if (!this.checkIfSumToCorrectValues(numbers)) {
        console.log("Sum incorrect");
        return false;
      }
      for (i = 0, len = numbers.length; i < len; i++) {
        number = numbers[i];
        if (number < -1) {
          console.log("Number is less than -1, it is " + number);
          return false;
        } else if (number > 1) {
          console.log("Number is greater than 1, it is " + number);
          return false;
        } else if (utilsL.numberOfDecimals(number) > 2) {
          console.log("Number has too many decimals, it is " + number);
          return false;
        }
      }
      return true;
    };

    Player.prototype.toString = function() {
      return console.log("Player ToString");
    };

    Player.prototype.receivedMessage = function(message) {
      var valid;
      this.currentNums = utilsL.convertStringToNumArray(message);
      if (typeof this.lastValidNums === 'undefined') {
        valid = this.briefCheckIfNumbersValid(this.currentNums);
        if (valid) {
          this.lastValidNums = this.currentNums;
        } else {
          console.log("FIRST RECEIVED NUMBERS FROM PLAYER NOT VALID");
          return;
        }
      } else {
        valid = this.checkIfLatterValuesAreValid(this.currentNums);
        if (valid) {
          this.lastValidNums = this.currentNums;
        }
      }
      return this.listener.receivedCandidateFromP(this.lastValidNums);
    };

    Player.prototype.sendMessage = function(message) {
      return this.client.write(message);
    };

    Player.prototype.startServer = function() {
      this.server = playerSocket;
      this.server.on('connection', (function(_this) {
        return function(client) {
          _this.client = client;
          console.log("Connection Made with player");
          return _this.client.on('data', function(data) {
            return _this.receivedMessage(data);
          });
        };
      })(this));
      this.server.listen(this.PLAYER_PORT);
      return console.log("Player Port Started on port " + this.PLAYER_PORT);
    };

    return Player;

  })();

  module.exports = Player;

}).call(this);
